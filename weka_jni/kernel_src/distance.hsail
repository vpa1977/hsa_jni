version 0:20140528:$full:$large;
extension "amd:gcn";
extension "IMAGE";

decl prog function &abort()();

prog kernel &__OpenCL_square_distance_kernel(
	kernarg_u64 %global_offset_0,
	kernarg_u64 %global_offset_1,
	kernarg_u64 %global_offset_2,
	kernarg_u64 %printf_buffer,
	kernarg_u64 %vqueue_pointer,
	kernarg_u64 %aqlwrap_pointer,
	kernarg_u64 %input,
	kernarg_u64 %samples,
	kernarg_u64 %ranges,
	kernarg_u64 %result,
	kernarg_u32 %element_count,
	kernarg_u32 %numerics_size,
	kernarg_u32 %nominal_size)
{
	pragma  "AMD RTI", "ARGSTART:__OpenCL_square_distance_kernel";
	pragma  "AMD RTI", "version:3:1:104";
	pragma  "AMD RTI", "device:generic";
	pragma  "AMD RTI", "uniqueid:1027";
	pragma  "AMD RTI", "memory:private:0";
	pragma  "AMD RTI", "memory:region:0";
	pragma  "AMD RTI", "memory:local:0";
	pragma  "AMD RTI", "value:global_offset_0:u64:1:1:0";
	pragma  "AMD RTI", "value:global_offset_1:u64:1:1:16";
	pragma  "AMD RTI", "value:global_offset_2:u64:1:1:32";
	pragma  "AMD RTI", "pointer:printf_buffer:u8:1:1:48:uav:8:1:RW:0:0:0";
	pragma  "AMD RTI", "value:vqueue_pointer:u64:1:1:64";
	pragma  "AMD RTI", "value:aqlwrap_pointer:u64:1:1:80";
	pragma  "AMD RTI", "pointer:input:double:1:1:96:uav:8:8:RW:0:0:0";
	pragma  "AMD RTI", "pointer:samples:double:1:1:112:uav:8:8:RW:0:0:0";
	pragma  "AMD RTI", "pointer:ranges:double:1:1:128:uav:8:16:RW:0:0:0";
	pragma  "AMD RTI", "pointer:result:double:1:1:144:uav:8:8:RW:0:0:0";
	pragma  "AMD RTI", "value:element_count:u32:1:1:160";
	pragma  "AMD RTI", "value:numerics_size:u32:1:1:176";
	pragma  "AMD RTI", "value:nominal_size:u32:1:1:192";
	pragma  "AMD RTI", "function:1:0";
	pragma  "AMD RTI", "memory:64bitABI";
	pragma  "AMD RTI", "uavid:8";
	pragma  "AMD RTI", "privateid:8";
	pragma  "AMD RTI", "enqueue_kernel:0";
	pragma  "AMD RTI", "kernel_index:0";
	pragma  "AMD RTI", "reflection:0:size_t";
	pragma  "AMD RTI", "reflection:1:size_t";
	pragma  "AMD RTI", "reflection:2:size_t";
	pragma  "AMD RTI", "reflection:3:size_t";
	pragma  "AMD RTI", "reflection:4:size_t";
	pragma  "AMD RTI", "reflection:5:size_t";
	pragma  "AMD RTI", "reflection:6:double*";
	pragma  "AMD RTI", "reflection:7:double*";
	pragma  "AMD RTI", "reflection:8:double2*";
	pragma  "AMD RTI", "reflection:9:double*";
	pragma  "AMD RTI", "reflection:10:int";
	pragma  "AMD RTI", "reflection:11:int";
	pragma  "AMD RTI", "reflection:12:int";
	pragma  "AMD RTI", "ARGEND:__OpenCL_square_distance_kernel";

@__OpenCL_square_distance_kernel_entry:
	// BB#0:                                // %entry
	workitemabsid_u32	$s0, 0;
	cvt_u64_u32	$d4, $s0;
	ld_kernarg_align(8)_width(all)_u64	$d5, [0];
	add_u64	$d0, $d4, $d5;
	ld_kernarg_align(4)_width(all)_u32	$s0, [%nominal_size];
	ld_kernarg_align(4)_width(all)_u32	$s1, [%element_count];
	ld_kernarg_align(4)_width(all)_u32	$s2, [%numerics_size];
	ld_kernarg_align(8)_width(all)_u64	$d1, [%result];
	ld_kernarg_align(8)_width(all)_u64	$d2, [%samples];
	ld_kernarg_align(8)_width(all)_u64	$d6, [%input];
	cmp_lt_b1_s32	$c0, $s2, 1;
	cbr_b1	$c0, @BB0_1;
	// BB#6:                                // %for.body.preheader
	ld_kernarg_align(8)_width(all)_u64	$d7, [%ranges];
	add_u64	$d3, $d5, $d4;
	cvt_u32_u64	$s3, $d3;
	mul_u32	$s3, $s1, $s3;
	mov_b64	$d3, 0;
	mov_b64	$d8, $d6;

@BB0_7:
	// %for.body
	cvt_s64_s32	$d9, $s3;
	shl_u64	$d9, $d9, 3;
	add_u64	$d9, $d2, $d9;
	ld_global_align(8)_f64	$d10, [$d9];
	ld_v2_global_align(16)_const_width(all)_f64	($d9, $d11), [$d7];
	sub_f64	$d10, $d10, $d9;
	ld_global_align(8)_const_width(all)_f64	$d12, [$d8];
	sub_f64	$d12, $d12, $d9;
	sub_f64	$d11, $d11, $d9;
	div_f64	$d9, $d12, $d11;
	div_f64	$d10, $d10, $d11;
	add_u64	$d7, $d7, 16;
	add_u64	$d8, $d8, 8;
	add_u32	$s3, $s3, 1;
	add_u32	$s2, $s2, 4294967295;
	sub_f64	$d9, $d9, $d10;
	mul_f64	$d9, $d9, $d9;
	add_f64	$d3, $d3, $d9;
	cmp_ne_b1_s32	$c0, $s2, 0;
	cbr_b1	$c0, @BB0_7;
	br	@BB0_2;

@BB0_1:
	mov_b64	$d3, 0;

@BB0_2:
	// %for.cond13.preheader
	cmp_ge_b1_s32	$c0, $s0, $s1;
	cbr_b1	$c0, @BB0_5;
	// BB#3:                                // %for.body16.preheader
	add_u64	$d4, $d5, $d4;
	cvt_u32_u64	$s2, $d4;
	mad_u32	$s2, $s1, $s2, $s0;
	sub_u32	$s1, $s1, $s0;
	cvt_s64_s32	$d4, $s0;
	shl_u64	$d4, $d4, 3;
	add_u64	$d4, $d6, $d4;

@BB0_4:
	// %for.body16
	cvt_s64_s32	$d5, $s2;
	shl_u64	$d5, $d5, 3;
	add_u64	$d5, $d2, $d5;
	ld_global_align(8)_f64	$d5, [$d5];
	ld_global_align(8)_const_width(all)_f64	$d6, [$d4];
	cmp_neu_b1_f64	$c0, $d6, $d5;
	cvt_u32_b1	$s0, $c0;
	add_u64	$d4, $d4, 8;
	add_u32	$s2, $s2, 1;
	add_u32	$s1, $s1, 4294967295;
	cvt_f64_s32	$d5, $s0;
	add_f64	$d3, $d3, $d5;
	cmp_ne_b1_s32	$c0, $s1, 0;
	cbr_b1	$c0, @BB0_4;

@BB0_5:
	// %for.end27
	cvt_u32_u64	$s0, $d0;
	cvt_s64_s32	$d0, $s0;
	shl_u64	$d0, $d0, 3;
	add_u64	$d0, $d1, $d0;
	st_global_align(8)_f64	$d3, [$d0];
	ret;
};
